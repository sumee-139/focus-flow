import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { describe, test, expect, vi } from 'vitest'
import { AddTaskForm } from './AddTaskForm'

// üî¥ Red Phase: Â§±Êïó„Åô„Çã„ÉÜ„Çπ„Éà„ÇíÂÖà„Å´Êõ∏„ÅèÔºàÂÆüË£Ö„Çà„ÇäÂâçÔºâ
describe('AddTaskForm', () => {
  test('should render add task form with required fields', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÅÆÂ≠òÂú®Á¢∫Ë™çÔºàÊó•Êú¨Ë™û„É©„Éô„É´ÂØæÂøúÔºâ
    expect(screen.getByLabelText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/Ë¶ãÁ©çÊôÇÈñì/i)).toBeInTheDocument()
    expect(screen.getByText(/„Çø„Çπ„ÇØ„ÇíËøΩÂä†/i)).toBeInTheDocument()
    expect(screen.getByText(/„Ç≠„É£„É≥„Çª„É´/i)).toBeInTheDocument()
  })

  test('should create task with unified icon when submitted', async () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // „Éï„Ç©„Éº„É†„Å´ÂÖ•ÂäõÔºàÊó•Êú¨Ë™û„É©„Éô„É´ÂØæÂøúÔºâ
    const titleInput = screen.getByLabelText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´/i)
    const minutesInput = screen.getByLabelText(/Ë¶ãÁ©çÊôÇÈñì/i)
    
    fireEvent.change(titleInput, {
      target: { value: 'Test Task' }
    })
    fireEvent.change(minutesInput, {
      target: { value: '30' }
    })
    
    // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°
    fireEvent.submit(screen.getByRole('form'))
    
    await waitFor(() => {
      expect(mockOnAdd).toHaveBeenCalledWith(expect.objectContaining({
        title: 'Test Task',
        estimatedMinutes: 30,
        completed: false,
        id: expect.any(String),
        createdAt: expect.any(Date),
        updatedAt: expect.any(Date),
        order: expect.any(Number),
        tags: []
      }))
    })
  })

  test('should not allow submission with empty title', async () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // „Çø„Ç§„Éà„É´„ÇíÁ©∫„ÅÆ„Åæ„Åæ„Åß„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
    fireEvent.submit(screen.getByRole('form'))
    
    // Êó•Êú¨Ë™û„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã
    await waitFor(() => {
      expect(screen.getByText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´„ÅØÂøÖÈ†à„Åß„Åô/i)).toBeInTheDocument()
    })
    
    // onAdd„ÅåÂëº„Å∞„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(mockOnAdd).not.toHaveBeenCalled()
  })

  test('should call onCancel when cancel button is clicked', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    const cancelButton = screen.getByRole('button', { name: /„Ç≠„É£„É≥„Çª„É´/i })
    fireEvent.click(cancelButton)
    
    expect(mockOnCancel).toHaveBeenCalled()
  })

  test('should support optional fields', async () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // ÂÖ®„Éï„Ç£„Éº„É´„Éâ„Å´ÂÖ•ÂäõÔºàÊó•Êú¨Ë™û„É©„Éô„É´ÂØæÂøúÔºâ
    fireEvent.change(screen.getByLabelText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´/i), {
      target: { value: 'Complex Task' }
    })
    fireEvent.change(screen.getByLabelText(/Ë™¨Êòé/i), {
      target: { value: 'Task description' }
    })
    fireEvent.change(screen.getByLabelText(/Ë¶ãÁ©çÊôÇÈñì/i), {
      target: { value: '60' }
    })
    fireEvent.change(screen.getByLabelText(/„Ç¢„É©„Éº„É†ÊôÇÂàª/i), {
      target: { value: '14:30' }
    })
    fireEvent.change(screen.getByLabelText(/„Çø„Ç∞/i), {
      target: { value: 'work,urgent' }
    })
    
    fireEvent.submit(screen.getByRole('form'))
    
    await waitFor(() => {
      expect(mockOnAdd).toHaveBeenCalledWith(expect.objectContaining({
        title: 'Complex Task',
        description: 'Task description',
        estimatedMinutes: 60,
        alarmTime: '14:30',
        tags: ['work', 'urgent']
      }))
    })
  })

  test('should comply with Design Philosophy - no priority or deadline fields', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // Design PhilosophyÁ¶ÅÊ≠¢„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(screen.queryByLabelText(/priority/i)).not.toBeInTheDocument()
    expect(screen.queryByLabelText(/deadline/i)).not.toBeInTheDocument()
    expect(screen.queryByLabelText(/due date/i)).not.toBeInTheDocument()
    expect(screen.queryByLabelText(/importance/i)).not.toBeInTheDocument()
  })
})

// üî¥ Red Phase - Phase 2.1Êîπ‰øÆÁâà„ÉÜ„Çπ„ÉàÔºàÂ§±Êïó„Åô„Çã„ÉÜ„Çπ„Éà„ÇíÂÖà„Å´Êõ∏„ÅèÔºâ
describe('TaskForm - Êîπ‰øÆÁâà (Phase 2.1)', () => {
  test('should accept valid estimated minutes input', async () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // „É¶„Éº„Ç∂„Éº„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºö30ÂàÜ„Åß„ÄåÊúâÂäπ„Å™ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Äç„Ç®„É©„Éº„ÅåÂá∫„ÇãÂïèÈ°å
    const titleInput = screen.getByLabelText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´/i)
    const minutesInput = screen.getByLabelText(/Ë¶ãÁ©çÊôÇÈñì/i)
    
    fireEvent.change(titleInput, { target: { value: '„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ' } })
    fireEvent.change(minutesInput, { target: { value: '30' } })
    
    fireEvent.submit(screen.getByRole('form'))
    
    // 30ÂàÜ„ÅÆÂÖ•Âäõ„Åß„Ç®„É©„Éº„ÅåÂá∫„Åö„Å´Ê≠£Â∏∏„Å´ÈÄÅ‰ø°„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    await waitFor(() => {
      expect(mockOnAdd).toHaveBeenCalledWith(expect.objectContaining({
        estimatedMinutes: 30
      }))
    })
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(screen.queryByText(/ÊúâÂäπ„Å™ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ/i)).not.toBeInTheDocument()
  })

  test('should display proper Japanese labels', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // Êó•Êú¨Ë™û„É©„Éô„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    expect(screen.getByLabelText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/Ë™¨Êòé/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/Ë¶ãÁ©çÊôÇÈñì/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/„Ç¢„É©„Éº„É†ÊôÇÂàª/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/„Çø„Ç∞/i)).toBeInTheDocument()
    
    // „Éú„Çø„É≥„ÅÆÊó•Êú¨Ë™ûÂåñÁ¢∫Ë™ç
    expect(screen.getByRole('button', { name: /„Çø„Çπ„ÇØ„ÇíËøΩÂä†/i })).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /„Ç≠„É£„É≥„Çª„É´/i })).toBeInTheDocument()
  })

  test('should have unified design tone', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    const form = screen.getByRole('form')
    
    // Design PhilosophyÊ∫ñÊã†„ÅÆ„ÇØ„É©„ÇπÂêçÁ¢∫Ë™ç
    expect(form).toHaveClass('add-task-form')
    
    // Áµ±‰∏Ä„Åï„Çå„ÅübuttonË¶ÅÁ¥†„ÅÆÁ¢∫Ë™ç
    const submitButton = screen.getByRole('button', { name: /„Çø„Çπ„ÇØ„ÇíËøΩÂä†/i })
    const cancelButton = screen.getByRole('button', { name: /„Ç≠„É£„É≥„Çª„É´/i })
    
    expect(submitButton).toHaveClass('btn', 'btn-primary')
    expect(cancelButton).toHaveClass('btn', 'btn-secondary')
  })

  test('should render buttons properly', () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // „Éú„Çø„É≥„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºà„É¶„Éº„Ç∂„Éº„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºö„Éú„Çø„É≥„ÅÆË¶ñË™çÊÄßÂïèÈ°åÔºâ
    const submitButton = screen.getByRole('button', { name: /„Çø„Çπ„ÇØ„ÇíËøΩÂä†/i })
    const cancelButton = screen.getByRole('button', { name: /„Ç≠„É£„É≥„Çª„É´/i })
    
    // „Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(submitButton).toBeVisible()
    expect(cancelButton).toBeVisible()
    
    // „Éï„Ç©„Éº„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„Ç≥„É≥„ÉÜ„ÉäÂÜÖ„Å´ÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const formActions = document.querySelector('.form-actions')
    expect(formActions).toContainElement(submitButton)
    expect(formActions).toContainElement(cancelButton)
  })

  test('should show Japanese validation error messages', async () => {
    const mockOnAdd = vi.fn()
    const mockOnCancel = vi.fn()

    render(<AddTaskForm onAdd={mockOnAdd} onCancel={mockOnCancel} />)
    
    // „Çø„Ç§„Éà„É´„ÇíÁ©∫„ÅÆ„Åæ„Åæ„Åß„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
    fireEvent.submit(screen.getByRole('form'))
    
    // Êó•Êú¨Ë™û„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã
    await waitFor(() => {
      expect(screen.getByText(/„Çø„Çπ„ÇØ„Çø„Ç§„Éà„É´„ÅØÂøÖÈ†à„Åß„Åô/i)).toBeInTheDocument()
    })
    
    // Ëã±Ë™û„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(screen.queryByText(/title is required/i)).not.toBeInTheDocument()
  })
})